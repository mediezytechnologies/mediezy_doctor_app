import 'dart:async';

import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_iconly/flutter_iconly.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:mediezy_doctor/Model/GenerateToken/clinic_get_model.dart';
import 'package:mediezy_doctor/Model/bottomsheet/bottomsheet_model.dart';
import 'package:mediezy_doctor/Repositary/Bloc/bottomsheet/bloc/bottom_sheet_bloc.dart';
import 'package:mediezy_doctor/Ui/CommonWidgets/text_style_widget.dart';
import 'package:mediezy_doctor/Ui/CommonWidgets/vertical_spacing_widget.dart';
import 'package:mediezy_doctor/Ui/Consts/app_colors.dart';
import 'package:mediezy_doctor/Ui/Screens/AppointmentsScreen/appointments_screen.dart';
import 'package:mediezy_doctor/Ui/Screens/GetTokensScreen/get_tokens_screen.dart';
import 'package:mediezy_doctor/Ui/Screens/PatientScreen/patient_screen.dart';
import 'package:mediezy_doctor/Ui/Screens/SheduleTokenScreen/ScheduleToken/schedule_token_details_screen.dart';
import 'package:mediezy_doctor/Ui/Screens/SheduleTokenScreen/shedule_token_screen.dart';
import 'package:mediezy_doctor/Ui/Screens/TokenScreen/token_screen.dart';

// ignore: must_be_immutable
class BottomNavigationControlWidget extends StatefulWidget {
  BottomNavigationControlWidget({super.key, required this.selectedIndex});
  int selectedIndex;

  @override
  State<BottomNavigationControlWidget> createState() =>
      _BottomNavigationControlWidgetState();
}

class _BottomNavigationControlWidgetState
    extends State<BottomNavigationControlWidget> {
  int selectedIndex = 0;
  late ClinicGetModel clinicGetModel;
  late StreamSubscription<ConnectivityResult> subscription;

  Timer? _timer;
  Timer? _dismissTimer;

  @override
  void initState() {
    super.initState();
    subscription = Connectivity()
        .onConnectivityChanged
        .listen((ConnectivityResult result) {
      handleConnectivityChange(result);
    });
    BlocProvider.of<BottomSheetBloc>(context).add(FetchBottomSheet());
    _startTimer();
  }

  void handleConnectivityChange(ConnectivityResult result) {
    if (result == ConnectivityResult.none) {
    } else {}
  }

  void _startTimer() {
    _timer = Timer.periodic(const Duration(hours: 3), (timer) {
      BlocProvider.of<BottomSheetBloc>(context).add(FetchBottomSheet());
    });
  }

  void _showModelBottomSheet(BottomsheetModel model) {
    if (model.schedule![0].status != 0) {
      _dismissTimer?.cancel();
      _dismissTimer = Timer(const Duration(seconds: 5), () {
        Navigator.popUntil(
          context,
          (Route<dynamic> route) => route.isFirst,
        );
      });

      final clinic = model.schedule![0].clinicName.toString();
      final schedule = model.schedule![0].scheduleType.toString();
      final days = model.schedule![0].daysRemaining.toString();

      showModalBottomSheet(
        backgroundColor: Colors.transparent,
        context: context,
        builder: (context) {
          final size = MediaQuery.of(context).size;
          return Column(
            mainAxisAlignment: MainAxisAlignment.end,
            children: [
              Container(
                height: 140.h,
                width: size.width * .95,
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(30),
                ),
                child: Padding(
                  padding: EdgeInsets.symmetric(horizontal: 15.w),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          IconButton(
                            padding: EdgeInsets.only(left: 30.w),
                            onPressed: () {
                              Navigator.pop(context);
                            },
                            icon: const Icon(
                              Icons.cancel_outlined,
                            ),
                          ),
                        ],
                      ),
                      Text(
                        "The token generated by you in schedule $schedule at $clinic will expire within $days days. Please generate new tokens :",
                        style: size.width > 450 ? blackMainText : blackMainText,
                      ),
                      const VerticalSpacingWidget(height: 10),
                      InkWell(
                        onTap: () {
                          Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (context) =>
                                  const ScheduleTokenDetailsScreen(),
                            ),
                          );
                        },
                        child: Center(
                          child: Container(
                            height: 35.h,
                            width: 120.w,
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(10),
                              color: kMainColor,
                            ),
                            child: Center(
                              child: Text(
                                "Generate token",
                                style: size.width > 450
                                    ? white12Bold
                                    : white12Bold,
                              ),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              const VerticalSpacingWidget(height: 10),
            ],
          );
        },
      );
    }
  }

  void selectScreen(int index) {
    setState(() {
      widget.selectedIndex = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    List<Widget> screens = [
      const AppointmentsScreen(),
      const TokenScreen(),
      const GetTokensScreen(),
      const SheduleTokenScreen(),
      const PatientScreen(),
    ];

    return Scaffold(
      bottomNavigationBar: BottomNavigationBar(
        onTap: selectScreen,
        currentIndex: widget.selectedIndex,
        type: BottomNavigationBarType.fixed,
        showSelectedLabels: true,
        showUnselectedLabels: true,
        selectedItemColor: kMainColor,
        selectedLabelStyle: TextStyle(
          color: kCardColor,
          fontSize: 10.sp,
          fontWeight: FontWeight.w500,
        ),
        unselectedLabelStyle: TextStyle(
          color: kCardColor,
          fontSize: 8.sp,
          fontWeight: FontWeight.w500,
        ),
        items: [
          BottomNavigationBarItem(
            icon: Icon(
              widget.selectedIndex == 0
                  ? IconlyBold.calendar
                  : IconlyLight.calendar,
              color: kMainColor,
            ),
            label: "Appointments",
          ),
          BottomNavigationBarItem(
            icon: Icon(
              widget.selectedIndex == 1
                  ? IconlyBold.ticket
                  : IconlyLight.ticket,
              color: kMainColor,
            ),
            label: "Token",
          ),
          BottomNavigationBarItem(
            icon: Icon(
              widget.selectedIndex == 2 ? IconlyBold.paper : IconlyLight.paper,
              color: kMainColor,
            ),
            label: "Booking",
          ),
          BottomNavigationBarItem(
            icon: Icon(
              widget.selectedIndex == 3
                  ? IconlyBold.timeSquare
                  : IconlyLight.timeSquare,
              color: kMainColor,
            ),
            label: "Schedule",
          ),
          BottomNavigationBarItem(
            icon: Icon(
              widget.selectedIndex == 4
                  ? IconlyBold.profile
                  : IconlyLight.profile,
              color: kMainColor,
            ),
            label: "Patients",
          ),
        ],
      ),
      body: BlocListener<BottomSheetBloc, BottomSheetState>(
        listener: (context, state) {
          if (state is BottomSheetLoaded) {
            _showModelBottomSheet(state.bottomSheetModel);
          }
        },
        child: StreamBuilder<ConnectivityResult>(
          stream: Connectivity().onConnectivityChanged,
          builder: (context, snapshot) {
            final connectivityResult = snapshot.data;
            if (connectivityResult == ConnectivityResult.none) {
              return Scaffold(
                backgroundColor: kCardColor,
                body: Column(
                  crossAxisAlignment: CrossAxisAlignment.center,
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Center(
                      child: SizedBox(
                        height: 180.h,
                        width: 300.w,
                        child: Image.asset(
                          "assets/images/no connection.png",
                          fit: BoxFit.fill,
                        ),
                      ),
                    ),
                    const VerticalSpacingWidget(height: 5),
                    Text(
                      "Please check your internet connection",
                      style: TextStyle(
                        fontSize: 17.sp,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
              );
            } else {
              return screens[widget.selectedIndex];
            }
          },
        ),
      ),
    );
  }

  @override
  void dispose() {
    _timer?.cancel();
    _dismissTimer?.cancel();
    subscription.cancel();
    super.dispose();
  }
}
